// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Add brand table

model User {
  id             Int        @id @default(autoincrement())
  uid            String?     @unique
  first_name     String
  last_name      String
  created_at     DateTime   @default(now())
  email          String     @unique
  streetAddress1 String?
  streetAddress2 String?
  city           String?
  state          String?
  zipCode        String?
  bio            String?
  showcases      Showcase[]
  items          Item[]
}

// User should own an item 
model Item {
  id              Int       @id @default(autoincrement())
  userId          Int
  user            User      @relation(fields: [userId], references: [id])
  showcase        Showcase? @relation(fields: [showcaseId], references: [id])
  showcaseId      Int?
  productEan      String
  product         Product   @relation(fields: [productEan], references: [ean])
  created_at      DateTime  @default(now())
  imageUrl        String    @default("")
  condition       String    @default("")
  userDescription String?
  forSale         Boolean   @default(false)
}

// Showcase is unique per user
model Showcase {
  id     Int    @id @default(autoincrement())
  name   String
  userId Int    @unique
  items  Item[]
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// collections are related to products (eg. All demon slayer funko pop figures in a single collection)
model Collection {
  id       Int                 @id @default(autoincrement())
  name     String
  products CollectionProduct[]
}

// Join table for many-to-many relationship between Collection and Product
model CollectionProduct {
  collectionId Int
  productEan   String
  collection   Collection @relation(fields: [collectionId], references: [id])
  product      Product    @relation(fields: [productEan], references: [ean])

  @@id([collectionId, productEan])
}

// Series data pertains to particular products (eg. Berserk, DemonSlayer, Naruto)
model Series {
  id       Int             @id @default(autoincrement())
  name     String
  products ProductSeries[] @relation("SeriesToProductSeries")
}

// Join Table for Many-to-Many relationships (for ex. collaboration products)
model ProductSeries {
  productEan String
  seriesId   Int
  product    Product @relation(fields: [productEan], references: [ean])
  series     Series  @relation("SeriesToProductSeries", fields: [seriesId], references: [id], onDelete: Cascade)

  @@id([productEan, seriesId])
}

//User doesn't own a Product
model Product {
  ean                   String              @id
  upc                   String?
  isbn                  String?
  data                  Json
  searchableTitle       String
  searchableDescription String
  searchableBrand       String
  items                 Item[]
  series                ProductSeries[]
  collections           CollectionProduct[]
}
